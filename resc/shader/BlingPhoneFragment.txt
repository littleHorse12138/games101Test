#version 330 core

in vec3 FragPos;  // 从顶点着色器接收的片段位置
in vec3 Normal;   // 从顶点着色器接收的法线
in vec3 FragColor;

out vec4 color;   // 输出颜色

uniform vec3 lightPos;    // 光源位置
uniform vec3 viewPos;     // 观察者位置

// 布林冯模型的参数
uniform vec3 objectColor; // 物体的颜色
uniform vec3 lightColor;  // 光源的颜色

uniform vec3 materialSpecular;    // 镜面反射的颜色
uniform vec3 materialDiffuse;   
uniform vec3 materialAmbient;
uniform float materialShininess;  // 镜面高光的指数

void main()
{
    // 环境光
    vec3 ambient =lightColor * materialAmbient;

    // 漫反射
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = lightColor * (diff * materialDiffuse);

    // 镜面反射
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), materialShininess);
    vec3 specular = lightColor * (spec * materialSpecular);

    vec3 result = (ambient + diffuse + specular) * FragColor; // 计算最终颜色
    color = vec4(result, 1.0); // 设置片段的颜色
}